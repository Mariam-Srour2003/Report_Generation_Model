import io  # Importing the io module for handling byte streams (like image files)
import utils  # Utility functions for loading datasets, models, and checkpoints
import config  # Configuration settings, including device (CPU/GPU) and image transformations
import numpy as np  # NumPy for numerical operations

from PIL import Image  # Python Imaging Library for image processing
from flask import Flask, jsonify, request  # Flask for creating the web server and handling HTTP requests
from flask_cors import CORS  # CORS module to handle Cross-Origin Resource Sharing

# Initialize the Flask application
app = Flask(__name__)

# Enable Cross-Origin Resource Sharing (CORS) to allow requests from different domains
CORS(app)

@app.route('/report/generate', methods=['POST'])
def generate_report():
    """
    Endpoint to generate a report from an uploaded X-ray image.
    The image is processed, and a caption (report) is generated by the model.

    Returns:
        JSON response containing the generated report.
    """
    global model  # Use the globally loaded model for generating the report

    model.eval()  # Set the model to evaluation mode (disables dropout, batch norm, etc.)

    if request.method == 'POST':
        file = request.files['file']  # Get the uploaded image file from the request

        # Read the image file into a BytesIO object (in-memory binary stream)
        image = io.BytesIO(file.read())

        # Open the image using PIL, convert it to grayscale, and then to a NumPy array
        image = np.array(Image.open(image).convert('L'))
        
        # Expand dimensions to add a channel axis (for grayscale) and repeat it to create an RGB-like image
        image = np.expand_dims(image, axis=-1)
        image = image.repeat(3, axis=-1)

        # Apply basic image transformations specified in the config
        image = config.basic_transforms(image=image)['image']

        # Move the image tensor to the specified device (CPU/GPU)
        image = image.to(config.DEVICE)

        # Generate a report (caption) using the model, with a maximum length of 25 words
        report = model.generate_caption(image.unsqueeze(0), max_length=25)

        # Return the generated report as a JSON response
        return jsonify({'report': ' '.join(report)})

if __name__ == '__main__':
    # Load the model instance with the vocabulary from the dataset
    model = utils.get_model_instance(utils.load_dataset().vocab)

    # Load the model weights from a saved checkpoint
    utils.load_checkpoint(model)

    # Run the Flask application on port 8080
    app.run(port=8080)
